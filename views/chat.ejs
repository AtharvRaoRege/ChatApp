<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Chat UI</title>
    <link
      href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css"
      rel="stylesheet"
    />
    <link
      href="https://cdn.jsdelivr.net/npm/remixicon@3.5.0/fonts/remixicon.css"
      rel="stylesheet"
    />
    <style>
      .inputs {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 300px;
        z-index: 999;
        background-color: rgba(128, 234, 255, 0.836);
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.2);
        display: flex;
        flex-direction: column;
        align-items: center;
      }
      .peoples::-webkit-scrollbar {
        display: none;
      }
    </style>
  </head>

  <body class="bg-blue-100 flex items-center justify-center h-screen">
    <div class="info hidden bg-red-500 rounded-lg w-3/5 h-4/5 p-5 absolute">
      <button
        class="closebtn absolute right-0 px-4 text-white top-0 py-2 bg-blue-900 rounded-md"
      >
        close
      </button>
      <h3
        class="text-4xl -mt-5 italic bold underline ml-4 text-black font-bold text-center"
      >
        Online Users
      </h3>
      <div
        class="peoples rounded-lg bg-blue-400 py-4 overflow-y-auto px-2 h-full w-full"
      >
        <!-- <div class="bg-green-900 flex items-center justify-start mt-8 h-20 w-full">
          <h3 class="text-4xl ml-4 text-white">Atharv Rege</h3>
        </div> -->
      </div>
    </div>
    <div class="namedivv h-screen w-full fixed bg-white">
      <div class="inputs">
        <input
          type="text"
          placeholder="Enter Your Name"
          required
          class="nameinpt px-5 py-2 rounded-md"
        />
        <input
          type="button"
          value="Submit"
          class="namebtn font-semibold mt-2 px-5 py-2 rounded-xl bg-blue-100"
        />
      </div>
    </div>
    <div class="w-5/6">
      <div class="bg-white shadow-lg rounded-lg overflow-hidden">
        <div class="bg-blue-500 p-4 flex justify-between align-center">
          <h2 class="text-white text-xl">Chat Room</h2>
          <h3
            class="typing italic text-sm opacity-90 tracking-tight text-white bold"
          ></h3>
          <h2 class="text-white text-xl">
            <span class="no text-black font-semibold"></span> are live.
          </h2>
          <i class="ri-group-fill live text-2xl text-white"></i>
          <h2 class="text-white text-xl">
            <span class="sptg text-black font-semibold"></span> is chatting.
            <a href="/" class="reset px-4 py-1 bg-red-900 text-white rounded-lg"
              >logout</a
            >
          </h2>
        </div>
        <div class="messages p-4 h-96 overflow-y-auto">
          <!-- <div class="mb-4">
                    <div class="flex items-end">
                        <div class="bg-blue-500 text-white p-2 rounded-lg max-w-xs">
                            <p>Hello! How are you?</p>
                        </div>
                    </div>
                </div> -->
        </div>
        <div class="p-4 bg-gray-100 flex">
          <input
            class="input w-full p-2 rounded-l-lg border border-gray-300"
            type="text"
            placeholder="Type a message..."
          />
          <button class="send bg-blue-500 text-white p-2 rounded-r-lg">
            Send
          </button>
        </div>
      </div>
    </div>
    <script
      src="https://cdn.socket.io/4.7.5/socket.io.min.js"
      integrity="sha384-2huaZvOR9iDzHqslqwpR87isEmrfxqyWOF7hr7BY6KG0+hVKLoEXMPUJw3ynWuhO"
      crossorigin="anonymous"
    ></script>
    <script>
      const socket = io();
      const input = document.querySelector(".input");
      const messages = document.querySelector(".messages");
      const inptname = document.querySelector(".nameinpt");
      const inptbtn = document.querySelector(".namebtn");
      let timer;

      inptbtn.addEventListener("click", function () {
        socket.emit("nameset", inptname.value.trim());
      });
      socket.on("namesetdone", function () {
        document.querySelector(".namedivv").style.display = "none";
        document.querySelector(".sptg").innerHTML = inptname.value;
      });
      document.querySelector(".send").addEventListener("click", function () {
        socket.emit("message", input.value.trim());
      });

      input.addEventListener("keypress", function (event) {
        if (event.key === "Enter") {
          if (event.shiftKey) {
            const cursorPos = this.selectionStart;
            this.value =
              this.value.slice(0, cursorPos) +
              "\n" +
              this.value.slice(cursorPos);
            this.selectionStart = cursorPos + 1;
            this.selectionEnd = cursorPos + 1;
          } else {
            event.preventDefault();
            socket.emit("message", input.value);
          }
        }
      });

      inptname.addEventListener("input", function (e) {
        let newvalue;
        if (inptname.value.trim().length > 0) {
          newvalue = inptname.value.replace(" ", "_");
        } else {
          newvalue = "";
        }
        inptname.value = newvalue;
      });

      socket.on("typing", function (name) {});
      let live = document.querySelector(".live");
      socket.on("countofpeople", function (count) {
        document.querySelector(".no").innerHTML = count.len;
      });
      live.addEventListener("click", function () {
        document.querySelector(".info").style.display = "initial";
      });
      document.querySelector(".closebtn").addEventListener("click", () => {
        document.querySelector(".info").style.display = "none";
      });
      input.addEventListener("input", function () {
        socket.emit("typing");
      });

      socket.on("typing", function (name) {
        document.querySelector(".typing").textContent = `${name} is typing...`;
        clearTimeout(timer);
        timer = setTimeout(() => {
          document.querySelector(".typing").textContent = "";
        }, 1200);
      });

      let container = ``;
      socket.on("message", function (message) {
        let myMsg = socket.id === message.id;
        let date = new Date();
        let hours = date.getHours();
        let minutes = date.getMinutes();
        if (hours > 12) hours = hours - 12;
        if (hours < 10) hours = "0" + hours;
        if (minutes < 10) minutes = "0" + minutes;
        let ampm = hours >= "12" ? "pm" : "am";
        let full_time = hours + ":" + minutes + " " + ampm;

        console.log(full_time);
        if (message != "") {
          container = `<div class="mb-4 text-right">
                    <div class="flex items-end ${
                      myMsg ? "justify-end" : "justify-start"
                    }">
                      <div class="flex flex-col"> 
                        <div class="flex flex-col ${
                          myMsg ? "bg-blue-600" : "bg-green-300"
                        } text-white p-2 rounded-lg max-w-xs">
                          ${
                            myMsg
                              ? `<p>${message.message}</p>`
                              : `<p><b>${message.name}</b>: ${message.message}</p>`
                          }
                          </div>
                          <p class="text-gray-600 opacity-80">${full_time}</p>
                      </div>
                    </div>
                </div>`;


          // container = `<div class="mb-4 text-right">
          //           <div class="flex flex-col items-end ${
          //             myMsg ? "justify-end" : "justify-start"
          //           }">
          //               <div class="${
          //                 myMsg ? "bg-blue-600" : "bg-green-300"
          //               } flex flex-col text-white p-2 rounded-lg max-w-xs">
          //                 ${
          //                   myMsg
          //                     ? `<p>${message.message}</p>`
          //                     : `<p><b>${message.name}</b>: ${message.message}</p>`
          //                 }
          //               </div>
          //                 <p class="text-gray-600 opacity-80">${full_time}</p>
          //           </div>
          //       </div>`;
          messages.innerHTML += container;
          messages.scrollTop = messages.scrollHeight;
          input.value = "";
        }
      });
      let peopleDiv = document.querySelector(".peoples");
      socket.on("participants", function (users) {
        console.log(users.users);
        peopleDiv.innerHTML = "";
        users.users.forEach(function (elem) {
          let newdiv = document.createElement("div");
          newdiv.innerHTML = `<div class="bg-green-900 flex items-center justify-start mt-8 h-20 w-full">
            <h3 class="text-4xl ml-4 text-white">${elem}</h3>
          </div>`;
          peopleDiv.appendChild(newdiv);
        });
      });
    </script>
  </body>
</html>
